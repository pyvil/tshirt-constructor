{
  "name": "mocha-jsdom",
  "description": "Simple integration of jsdom into mocha tests",
  "version": "1.0.0",
  "author": {
    "name": "Rico Sta. Cruz",
    "email": "rico@ricostacruz.com"
  },
  "bugs": {
    "url": "https://github.com/rstacruz/mocha-jsdom/issues"
  },
  "devDependencies": {
    "blanket": "^1.1.6",
    "chai": "^3.0.0",
    "coveralls": "^2.11.2",
    "jquery": "^2.1.1",
    "jsdom": ">=3.1.2",
    "mocha": "^2.2.5",
    "mocha-lcov-reporter": "0.0.1",
    "mocha-standard": "0.0.5",
    "standard": "^4.3.3"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/rstacruz/mocha-jsdom#readme",
  "keywords": [
    "jsdom",
    "mocha"
  ],
  "license": "MIT",
  "main": "index.js",
  "peerDependencies": {
    "jsdom": "*",
    "mocha": "*"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rstacruz/mocha-jsdom.git"
  },
  "scripts": {
    "coverage": "env COVERAGE=1 mocha -R html-cov > coverage.html && open coverage.html",
    "test": "mocha"
  },
  "browser": "browser.js",
  "readme": "# mocha-jsdom\n\nTest frontend libraries in the console using io.js, [mocha] and [jsdom].  \n\n[![Status](http://img.shields.io/travis/rstacruz/mocha-jsdom/master.svg?style=flat)](https://travis-ci.org/rstacruz/mocha-jsdom \"See test builds\")\n[![Status](https://travis-ci.org/rstacruz/mocha-jsdom.svg?branch=master)](https://travis-ci.org/rstacruz/mocha-jsdom \"See test builds\")\n\n<br>\n\n## Usage\n\n```sh\n$ npm i --save-dev mocha-jsdom\n```\n\n[![npm version](http://img.shields.io/npm/v/mocha-jsdom.svg?style=flat)](https://npmjs.org/package/mocha-jsdom \"View this project on npm\")\n\nUse `jsdom()` inside your `describe(...)` block (or the global context). It will \nturn your Node.js environment into a mock browser environment supporting the \nfull DOM and browser API. The variables `window`, `document`, `history` (and so \non) will then be available for use.\n\n```js\nvar jsdom = require('mocha-jsdom')\nvar expect = require('chai').expect\n\ndescribe('mocha tests', function () {\n\n  jsdom()\n\n  it('has document', function () {\n    var div = document.createElement('div')\n    expect(div.nodeName).eql('DIV')\n  })\n\n})\n```\n\nSee [examples/basic](examples/basic) for an example of a basic setup.\n\n<br>\n\n## Node and io.js information\n\nAs of jsdom 4.0.0, [jsdom now requires io.js](https://github.com/tmpvar/jsdom/blob/master/Changelog.md#400) and will not work with Node.js 0.12 or below.\n\n<br>\n\n## How it works\n\nmocha-jsdom is a simple glue to integrate [jsdom] to mocha.\n\nInvoking `jsdom()` will inject `before` and `after` handlers to the current \nmocha suite which will setup and teardown jsdom. Here's what it does:\n\n* __Window__: `global.window` will be available as the jsdom.\n\n* __Globals__: global variables like `document` and `history` are propagated, \n  and they're cleaned up after tests run.\n\n* __Error handling__: jsdom errors are sanitized so that their stack traces are \nshortened.\n\n__NB:__ Before you try this library, learn about jsdom first. In fact, you may be \nable to integrate jsdom into your tests *without* this library; this is mostly \nsyntactic sugar and reasonable defaults.\n\n<br>\n\n## Using with a library\n\nPerfect for testing small DOM-consuming utilities in the console. See \n[test/jquery.js](test/jquery.js) for an example.\n\n```js\ndescribe('mocha tests', function () {\n\n  var $\n  jsdom()\n\n  before(function () {\n    $ = require('jquery')\n  })\n\n  it('works', function () {\n    document.body.innerHTML = '<div>hola</div>'\n    expect($(\"div\").html()).eql('hola')\n  })\n\n})\n```\n\nSee [examples/basic](examples/basic) for an example of a basic setup.\n\n<br>\n\n## Using with a library, alternate\n\nYou can also pass the source code via `src`:\n\n```js\ndescribe('mocha tests', function () {\n  jsdom({\n    src: fs.readFileSync('jquery.js', 'utf-8')\n  })\n\n  ...\n})\n```\n\n<br>\n\n## Configuration\n\nYou can pass jsdom options:\n\n```js\ndescribe('mocha tests', function () {\n  jsdom({\n    parsingMode: 'xml'\n  })\n\n  ...\n})\n```\n\n<br>\n\n## Working with mocha --watch\n\nWhen using with `--watch`, you my encounter strange errors from 3rd-party\nlibraries like jQuery not working properly.\n\nIn these cases, use `require('mocha-jsdom').rerequire` instead of `require()`.\nThis will ensure that the `require()` call will always happen.\n\n```js\nvar $\nvar jsdom = require('mocha-jsdom')\nvar rerequire = jsdom.rerequire\n\njsdom()\n\nbefore(function () {\n  $ = rerequire('jquery')\n})\n```\n\n<br>\n\n## Special config\n\nOther mocha-jsdom specific options:\n\n * `globalize` - propagates to values in `window` to `global`. defaults to true.\n\n * `console` - allows you to use `console.log` inside a jsdom script. defaults \n to true.\n\n * `useEach` - bind to Mocha's `beforeEach`/`afterEach` rather than `before`/`after`.\n defaults to false.\n\n * `skipWindowCheck` - skips checking of `window` at startup. When false,\n mocha-jsdom will throw an error if `window` already exists. Defaults to false.\n\n[jsdom]: https://www.npmjs.org/package/jsdom\n[mocha]: https://www.npmjs.com/package/mocha\n\n<br>\n\n## Testling support\n\nYes, fully compatible with testling. A test suite using jsdom should be able to use testling.\n\nSee [examples/basic](examples/basic/) for a setup that allows for testing via iojs (jsdom), testling, and mocha via the browser.\n\n<br>\n\n## Thanks\n\n**mocha-jsdom** Â© 2014+, Rico Sta. Cruz. Released under the [MIT] License.<br>\nAuthored and maintained by Rico Sta. Cruz with help from contributors ([list][contributors]).\n\n> [ricostacruz.com](http://ricostacruz.com) &nbsp;&middot;&nbsp;\n> GitHub [@rstacruz](https://github.com/rstacruz) &nbsp;&middot;&nbsp;\n> Twitter [@rstacruz](https://twitter.com/rstacruz)\n\n[MIT]: http://mit-license.org/\n[contributors]: http://github.com/rstacruz/mocha-jsdom/contributors\n",
  "readmeFilename": "README.md",
  "_id": "mocha-jsdom@1.0.0",
  "_from": "mocha-jsdom@"
}
