{
  "name": "qunit-cli",
  "description": "A command line interface for the QUnit testing framework",
  "version": "0.2.0",
  "author": {
    "name": "Devon Govett",
    "email": "devongovett@gmail.com",
    "url": "http://badassjs.com/"
  },
  "scripts": {
    "test": "./bin/qunit-cli ./test/simple.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/devongovett/qunit-cli.git"
  },
  "bugs": {
    "url": "http://github.com/devongovett/qunit/issues"
  },
  "dependencies": {
    "colors": "*",
    "object-assign": "^2.0.0",
    "optimist": ">=0.3",
    "qunitjs": "^1.15.0"
  },
  "bin": {
    "qunit-cli": "bin/qunit-cli"
  },
  "readme": "qunit-cli\n=========\n\nA Node module that adds colorful CLI support for the [QUnit](http://qunitjs.com)\ntesting framework.\n\n![screenshot](screenshot.png)\n\n## Usage\n\nThere are two ways to use qunit-cli:\n\n1. Include it at the top of your test files. First, install the module using npm.\n\n        npm install qunit-cli\n\n    And now, require it in your test files:\n\n        if (typeof QUnit == 'undefined') // if your tests also run in the browser...\n            QUnit = require('qunit-cli');\n        \n        // use QUnit as you normally would.\n\n    Note that this module does not introduce QUnit into the global scope like QUnit\n    does in the browser, so you'll have to do that yourself if needed.\n\n    To run, use the `node` program.\n\n        node mytests.js\n\n2. Use the command-line testrunner located at `bin/qunit-cli`, passing it the test files as arguments.\n    If you install the module globally using npm, you can use the `qunit-cli` command which will be \n    installed into your PATH.\n\n        npm install qunit-cli -g\n        qunit-cli mytests.js\n\n    This will introduce QUnit into the global scope like QUnit does in the browser,\n    so you don't need to modify the tests themselves. You can use both methods in\n    the same test files without problems.\n\n## Command line options\n\nThere are several command line options available when running your tests using\nqunit-cli that mimic some of the options in the standard browser-based QUnit\ntesting interface.  They are:\n\n    --module, -m    Limits testing to an individual module\n    --test,   -t    Limits testing to a single test (by number)\n    --quiet,  -q    Flag to hide passed tests from the output\n\nThe command-line test runner has some additional options available:\n\n    --code,   -c    Path to code loaded globally. You can prefix a namespace\n                    using a colon (:)\n\nHere are some examples:\n\n```bash\n# code exports are added to global namespace\nqunit-cli -c /path/to/code test.js\n\n# code exports are added to ns namespace\nqunit-cli -c ns:/path/to/code test.js\n```\n\n## License\n\n`qunit-cli` is released under the MIT license.\n",
  "readmeFilename": "readme.md",
  "_id": "qunit-cli@0.2.0",
  "dist": {
    "shasum": "8027f8cafc021f4bd61b588c461389e05729c0cb"
  },
  "_from": "qunit-cli@",
  "_resolved": "https://registry.npmjs.org/qunit-cli/-/qunit-cli-0.2.0.tgz"
}
